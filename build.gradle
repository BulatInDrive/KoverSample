import kotlinx.kover.gradle.plugin.dsl.AggregationType
import kotlinx.kover.gradle.plugin.dsl.GroupingEntityType
import kotlinx.kover.gradle.plugin.dsl.MetricType

// Top-level build file where you can add configuration options common to all sub-projects/modules.
plugins {
    id 'com.android.application' version '7.3.1' apply false
    id 'org.jetbrains.kotlin.android' version '1.8.22' apply false
    id 'org.jetbrains.kotlinx.kover' version "0.7.3"
    id 'com.android.library' version '7.3.1' apply false
}
apply from: "$rootDir/kover.gradle"

allprojects {
    apply plugin: 'org.jetbrains.kotlinx.kover'

    tasks.register("cleanAll") {
        doFirst {
            def targetPath = project.projectDir.toString() + '/build'
            project.delete(files("$targetPath"))
        }
    }

    afterEvaluate {
        apply from: "$rootDir/kover.gradle"
    }
}

subprojects {
    if (project.getBuildFile().exists()) {
        rootProject.dependencies { kover(project) }
    }

    koverMergeRelease(project, 'com.android.application', 'applicationVariants')
    koverMergeRelease(project, 'com.android.library', 'libraryVariants')
}

def koverMergeRelease(Project project, String pluginId, String variants) {
    project.plugins.withId(pluginId) {
        project.android {
            getProperty(variants).all { variant ->
                if (variant.name == "gmsRelease" || variant.name == "release") {
                    project.koverReport {
                        defaults {
                            mergeWith(variant.name)
                        }
                    }
                }
            }
        }
    }
}

ext.changedFiles = project.properties['changedFiles'] ?: ""

koverReport {
    defaults {
        verify {
            rule {
                entity = GroupingEntityType.CLASS

                filters {
                    includes {
                        classes(changedFiles.split(','))
                    }
                }

                bound {
                    minValue = 20
                    metric = MetricType.LINE
                    aggregation = AggregationType.COVERED_PERCENTAGE
                }
            }
        }
    }
}
